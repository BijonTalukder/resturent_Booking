generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  pending
  paid
  failed
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String?   @unique
  password          String
  phone             String    @unique
  role              Role
  name              String
  isVerified        Boolean   @default(false)
  verificationToken String?   @unique
  tokenExpiresAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Hotel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  location    String
  latitude    Float
  longitude   Float
  image       String
  divisionId  String
  cityId      String
  amenities   String[]
  ownerId     String   @db.ObjectId
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String    @db.ObjectId
  roomNumber  String    
  type        String    
  price       Float    
  capacity    Int       
  images      String[]  
  amenities   String[]  
  isAvailable Boolean   @default(true) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // bookings    Booking[] // Relationship: One room has multiple bookings
}

model Booking {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String  @db.ObjectId
  userId    String  @db.ObjectId
  checkIn   DateTime
  checkOut  DateTime
  totalPrice Float
  status    String  @default("pending") // pending, confirmed, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  email           String
  phone           String?
  name            String
  orderTotal      Float
  paymentStatus   PaymentStatus
  shippingAddress String
  billingAddress  String
  orderStatus     OrderStatus   @default(pending)
  orderItems      Json
  deliveryFee     Float         @default(0)
  taxAmount       Float         @default(0)
  transactionId   String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
