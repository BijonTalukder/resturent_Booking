generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  pending
  paid
  failed
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String?   @unique
  password          String
  phone             String    @unique
  role              Role
  name              String
  isVerified        Boolean   @default(false)
  verificationToken String?   @unique
  tokenExpiresAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Hotel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  location    String
  latitude    Float
  longitude   Float
  image       String
  divisionId  String
  cityId      String
  amenities   String[]
  ownerId     String   @db.ObjectId
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rooms Room[] @relation("HotelRooms")
}

model Room {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String     @db.ObjectId
  hotel       Hotel      @relation("HotelRooms", fields: [hotelId], references: [id])

  roomNumber  String    
  type        String    
  price       Float    
  capacity    Int       
  images      String[]  
  amenities   String[]  
  isAvailable Boolean   @default(true) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // roomBookings RoomBooking[]  @relation("RoomOnBooking")
}
model Booking {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  email          String
  phone          String
  name           String
  checkIn        DateTime
  checkOut       DateTime
  totalPrice     Float
  status         String         @default("pending") // pending, confirmed, cancelled
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paymentStatus  PaymentStatus  @default(pending)
  transactionId  String?        @unique
  payment        Payment?       @relation("BookingToPayment")

//  roomBookings  RoomBooking[]    @relation("RoomOnBooking")
 }
 model RoomBooking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId  String   @db.ObjectId
  roomId     String   @db.ObjectId

  // booking    Booking  @relation(fields: [bookingId], references: [id])
  // room       Room     @relation(fields: [roomId], references: [id])
}

model Payment {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  bookingId  String         @unique @db.ObjectId
  tranId     String         @unique
  method     String         // "bkash", "nagad", "sslcommerz", etc.
  amount     Float
  status     PaymentStatus  @default(pending)
  gatewayRes Json?          // Save full response for debugging
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  booking    Booking        @relation("BookingToPayment", fields: [bookingId], references: [id])
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

